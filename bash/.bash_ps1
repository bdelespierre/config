#!/bin/bash

# get bash colors and styles here: http://misc.flogisoft.com/bash/tip_colors_and_formatting
# get PS1 variables here: http://ss64.com/bash/syntax-prompt.html
C_RESET='\[\e[0m\]'
C_BLINK='\[\e[5m\]'
C_BOLD='\[\e[1m\]'
C_BLACK='\[\e[30m\]'
C_RED='\[\e[31m\]'
C_GREEN='\[\e[32m\]'
C_YELLOW='\[\e[33m\]'
C_BLUE='\[\e[34m\]'
C_MAGENTA='\[\e[35m\]'
C_CYAN='\[\e[36m\]'
C_LIGHT_GRAY='\[\e[37m\]'
C_DEFAULT='\[\e[39m\]'
C_DARK_GRAY='\[\e[90m\]'
C_LIGHT_RED='\[\e[91m\]'
C_LIGHT_GREEN='\[\e[92m\]'
C_LIGHT_YELLOW='\[\e[93m\]'
C_LIGHT_BLUE='\[\e[94m\]'
C_LIGHT_MAGENTA='\[\e[95m\]'
C_LIGHT_CYAN='\[\e[96m\]'
C_WHITE='\[\e[97m\]'

# palette
C_COLORS=(${C_RED} ${C_GREEN} ${C_YELLOW} ${C_BLUE} ${C_MAGENTA} ${C_CYAN} ${C_WHITE})
C_PRIMARY=${C_COLORS[$RANDOM % ${#C_COLORS[@]} ]}
C_SECONDARY=${C_COLORS[$RANDOM % ${#C_COLORS[@]} ]}
C_MUTED="${C_DARK_GRAY}"
C_OK="${C_GREEN}"
C_NOK="${C_RED}"

function __enc #(string, prefix)
{
    echo "${C_MUTED}[${2:-""}${C_RESET}$1${C_MUTED}]${C_RESET}"
}

function __exit_status #(time, exit_status)
{
    local color
    [[ 0 == "$2" || 130 == "$2" ]] && color=$C_OK || color=$C_NOK
    echo "$color${1:-'0'}s$C_RESET"
}

function __git_branch
{
    local color adddd removed
    local acolor=$C_MUTED
    local rcolor=$C_MUTED
    local branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    `git diff --exit-code >/dev/null 2>&1` && color=$C_OK || color=$C_NOK
    if [ -z $branch ]; then
        color=$C_MUTED
    else
        added=$(git diff --numstat | awk '{print $1}' | paste -sd+ | bc)
        [[ $added -gt 0 ]] && acolor=$C_GREEN
        removed=$(git diff --numstat | awk '{print $2}' | paste -sd+ | bc)
        [[ $removed -gt 0 ]] && rcolor=$C_RED
    fi
    echo "${color}${branch:-"none"}${C_MUTED}:${acolor}+${added:-0}${C_MUTED}:${rcolor}-${removed:-0}${C_RESET}"
}

function __jobs_count
{
  local stopped=$(jobs -sp | wc -l)
  local running=$(jobs -rp | wc -l)
  ((running+stopped)) && echo $(__enc "${C_OK}${running}${C_MUTED}-${C_SECONDARY}${stopped}")
}

function __history_num
{
    echo "${C_PRIMARY}$(($(fc -l | tail -n 1 | awk '{print $1;}')+1))"
}

function __prompt_left
{
    local shells=$(($(ls /dev/pts | wc -l) - 2))
    [ "$(id -u)" = "0" ] && echo -n "$(__enc "${C_NOK}${C_BLINK}root${C_RESET}") "
    echo \
        $(__enc "${C_SECONDARY}\u${C_MUTED}@${C_BOLD}${C_SECONDARY}\h${C_RESET}") \
        $(__enc "${C_PRIMARY}\\l${C_MUTED}/${shells}" "\\s: ") \
        $(__enc "${C_MUTED}\\d ${C_BOLD}${C_SECONDARY}\\t${C_RESET}") \
        $(__enc "${C_PRIMARY}\w") \
        $(__jobs_count)
}

function __prompt_right #(time, exit_status)
{
    echo \
        $(__enc $(__git_branch) "git: ") \
        $(__enc $(__history_num) "${PROMPT_NUM}/") \
        $(__enc $(__exit_status $@) "took: ")
}

function prompt
{
    [[ -z "${PROMPT_FIRST}" ]] && PROMPT_NUM="1" && PROMPT_FIRST="1"

    echo # newline (does not appear after clear)
    PS1=$(printf "%*s\r%s\n${C_MUTED}>_${C_RESET}" "$(($(tput cols)+202))" "$(__prompt_right $@)" "$(__prompt_left)")
}

function __timer_start
{
    PROMPT_TIMER=${PROMPT_TIMER:-$SECONDS}
    [[ "$BASH_COMMAND" != "__timer_stop" ]] && ((PROMPT_NUM++))
}

function __timer_stop
{
    prompt $(($SECONDS - $PROMPT_TIMER)) $?
    unset PROMPT_TIMER
}

trap '__timer_start' DEBUG
PROMPT_COMMAND=__timer_stop
